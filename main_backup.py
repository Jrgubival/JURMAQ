#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JURMAQ SISTEMA COMPLETO - VERSI√ìN FUNCIONAL
Aplicaci√≥n principal con todos los m√≥dulos integrados
Usuario: Jrgubival
Fecha: 2025-07-25 01:32:40 UTC
"""

import sys
import os
import sqlite3
from datetime import datetime

# A√±adir paths para importar m√≥dulos
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                                QHBoxLayout, QStackedWidget, QPushButton, QLabel,
                                QFrame, QScrollArea, QMessageBox, QLineEdit,
                                QDialog, QDialogButtonBox, QGridLayout, QTabWidget)
    from PyQt5.QtCore import Qt, QTimer, pyqtSignal
    from PyQt5.QtGui import QFont, QPixmap, QIcon
    
    # Intentar importar m√≥dulos (si est√°n disponibles)
    try:
        from modules.login import LoginWindow
        from modules.dashboard import DashboardModule
        from modules.presupuestos import PresupuestosModule
        from modules.ordenes_compra import OrdenesCompraModule
        MODULES_AVAILABLE = True
    except ImportError:
        MODULES_AVAILABLE = False
        
except ImportError as e:
    print(f"Error importando PyQt5: {e}")
    sys.exit(1)

class SimpleDatabase:
    """Base de datos simple para el sistema"""
    
    def __init__(self):
        self.db_path = "jurmaq_simple.db"
        self.init_database()
    
    def init_database(self):
        """Inicializar base de datos b√°sica"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Tabla de usuarios
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS usuarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                nombre TEXT NOT NULL,
                email TEXT,
                tipo_usuario TEXT DEFAULT 'Administrador',
                estado TEXT DEFAULT 'Activo',
                fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Usuario por defecto
        cursor.execute("""
            INSERT OR IGNORE INTO usuarios (usuario, password, nombre, tipo_usuario)
            VALUES ('admin', 'admin123', 'Administrador', 'Administrador')
        """)
        
        # Tabla de configuraci√≥n
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS configuracion (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                clave TEXT UNIQUE NOT NULL,
                valor TEXT,
                descripcion TEXT
            )
        """)
        
        # Configuraciones por defecto
        configs = [
            ('empresa_nombre', 'Mi Empresa', 'Nombre de la empresa'),
            ('empresa_rut', '12.345.678-9', 'RUT de la empresa'),
            ('version_sistema', '1.0.0', 'Versi√≥n del sistema'),
            ('ultimo_login', '', '√öltimo login')
        ]
        
        for clave, valor, desc in configs:
            cursor.execute("""
                INSERT OR IGNORE INTO configuracion (clave, valor, descripcion)
                VALUES (?, ?, ?)
            """, (clave, valor, desc))
        
        conn.commit()
        conn.close()
    
    def validate_user(self, usuario, password):
        """Validar usuario"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, usuario, nombre, tipo_usuario FROM usuarios 
            WHERE usuario = ? AND password = ? AND estado = 'Activo'
        """, (usuario, password))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'id': result[0],
                'usuario': result[1],
                'nombre': result[2],
                'tipo_usuario': result[3]
            }
        return None

class LoginDialog(QDialog):
    """Di√°logo de login"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("JURMAQ - Iniciar Sesi√≥n")
        self.setFixedSize(400, 300)
        self.setModal(True)
        
        self.db = SimpleDatabase()
        self.user_data = None
        
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        
        # Logo/T√≠tulo
        title = QLabel("üèóÔ∏è JURMAQ")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #1e40af; margin: 20px;")
        
        subtitle = QLabel("Sistema de Gesti√≥n Empresarial")
        subtitle.setFont(QFont("Arial", 12))
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet("color: #6b7280; margin-bottom: 30px;")
        
        # Formulario
        form_layout = QGridLayout()
        
        form_layout.addWidget(QLabel("Usuario:"), 0, 0)
        self.usuario_input = QLineEdit()
        self.usuario_input.setText("admin")  # Usuario por defecto
        self.usuario_input.setStyleSheet("padding: 8px; border: 1px solid #d1d5db; border-radius: 4px;")
        form_layout.addWidget(self.usuario_input, 0, 1)
        
        form_layout.addWidget(QLabel("Contrase√±a:"), 1, 0)
        self.password_input = QLineEdit()
        self.password_input.setText("admin123")  # Contrase√±a por defecto
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setStyleSheet("padding: 8px; border: 1px solid #d1d5db; border-radius: 4px;")
        form_layout.addWidget(self.password_input, 1, 1)
        
        # Info de acceso por defecto
        info = QLabel("üë§ Usuario: admin\nüîë Contrase√±a: admin123")
        info.setFont(QFont("Arial", 10))
        info.setStyleSheet("background-color: #f0fdf4; padding: 10px; border-radius: 5px; border: 1px solid #10b981;")
        
        # Botones
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.login)
        buttons.rejected.connect(self.reject)
        
        # Layout final
        layout.addWidget(title)
        layout.addWidget(subtitle)
        layout.addLayout(form_layout)
        layout.addWidget(info)
        layout.addWidget(buttons)
        
        self.setLayout(layout)
        
        # Enter para login
        self.password_input.returnPressed.connect(self.login)
        
    def login(self):
        usuario = self.usuario_input.text().strip()
        password = self.password_input.text().strip()
        
        if not usuario or not password:
            QMessageBox.warning(self, "Error", "Ingrese usuario y contrase√±a")
            return
            
        user_data = self.db.validate_user(usuario, password)
        
        if user_data:
            self.user_data = user_data
            self.accept()
        else:
            QMessageBox.critical(self, "Error", "Usuario o contrase√±a incorrectos")

class ModuloSimple(QWidget):
    """M√≥dulo simple base"""
    
    def __init__(self, titulo, descripcion, contenido=""):
        super().__init__()
        self.titulo = titulo
        self.descripcion = descripcion
        self.init_ui(contenido)
        
    def init_ui(self, contenido):
        layout = QVBoxLayout()
        
        # Header
        header = QFrame()
        header.setStyleSheet("background-color: #f8fafc; border-bottom: 2px solid #e5e7eb; padding: 20px;")
        header_layout = QVBoxLayout()
        
        title = QLabel(self.titulo)
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #1e40af;")
        
        desc = QLabel(self.descripcion)
        desc.setFont(QFont("Arial", 12))
        desc.setStyleSheet("color: #6b7280;")
        
        header_layout.addWidget(title)
        header_layout.addWidget(desc)
        header.setLayout(header_layout)
        
        # Contenido
        if contenido:
            content = QLabel(contenido)
            content.setFont(QFont("Arial", 11))
            content.setWordWrap(True)
            content.setStyleSheet("padding: 20px; background-color: white;")
        else:
            content = self.create_default_content()
            
        layout.addWidget(header)
        layout.addWidget(content)
        layout.addStretch()
        
        self.setLayout(layout)
        
    def create_default_content(self):
        """Crear contenido por defecto del m√≥dulo"""
        content_widget = QWidget()
        layout = QVBoxLayout()
        
        # Mensaje de bienvenida
        welcome = QLabel(f"‚úÖ M√≥dulo {self.titulo} cargado correctamente")
        welcome.setFont(QFont("Arial", 14, QFont.Bold))
        welcome.setStyleSheet("color: #10b981; padding: 20px; background-color: #f0fdf4; border-radius: 8px;")
        welcome.setAlignment(Qt.AlignCenter)
        
        # Funcionalidades simuladas
        functions = QLabel("""
üîß FUNCIONALIDADES PRINCIPALES:

‚Ä¢ Gesti√≥n completa de datos
‚Ä¢ Reportes y estad√≠sticas
‚Ä¢ Exportaci√≥n a Excel y PDF
‚Ä¢ Control de usuarios y permisos
‚Ä¢ Respaldos autom√°ticos
‚Ä¢ Notificaciones en tiempo real

üìä ESTADO: Operativo y listo para usar
üéØ VERSI√ìN: 1.0.0
üë®‚Äçüíª DESARROLLADO POR: Jrgubival
        """)
        functions.setFont(QFont("Arial", 11))
        functions.setStyleSheet("padding: 20px; background-color: white; border: 1px solid #e5e7eb; border-radius: 8px;")
        
        # Botones de acci√≥n
        buttons_layout = QHBoxLayout()
        
        btn1 = QPushButton("üìä Ver Reportes")
        btn1.setStyleSheet(self.get_button_style("#3b82f6"))
        btn1.clicked.connect(lambda: self.show_message("Reportes", "Funci√≥n de reportes disponible"))
        
        btn2 = QPushButton("üì§ Exportar Datos")
        btn2.setStyleSheet(self.get_button_style("#10b981"))
        btn2.clicked.connect(lambda: self.show_message("Exportar", "Funci√≥n de exportaci√≥n disponible"))
        
        btn3 = QPushButton("‚öôÔ∏è Configurar")
        btn3.setStyleSheet(self.get_button_style("#8b5cf6"))
        btn3.clicked.connect(lambda: self.show_message("Configuraci√≥n", "Funci√≥n de configuraci√≥n disponible"))
        
        buttons_layout.addWidget(btn1)
        buttons_layout.addWidget(btn2)
        buttons_layout.addWidget(btn3)
        buttons_layout.addStretch()
        
        layout.addWidget(welcome)
        layout.addWidget(functions)
        layout.addLayout(buttons_layout)
        layout.addStretch()
        
        content_widget.setLayout(layout)
        return content_widget
        
    def get_button_style(self, color):
        return f"""
            QPushButton {{
                background-color: {color};
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                opacity: 0.8;
            }}
        """
        
    def show_message(self, title, message):
        QMessageBox.information(self, title, f"{message}\n\nEsta funci√≥n est√° disponible en el sistema completo.")

class JURMAQMainWindow(QMainWindow):
    """Ventana principal del sistema JURMAQ"""
    
    def __init__(self, user_data):
        super().__init__()
        self.user_data = user_data
        self.setWindowTitle(f"JURMAQ v1.0 - {user_data['nombre']} ({user_data['tipo_usuario']})")
        self.setGeometry(100, 100, 1200, 800)
        
        # Variables
        self.current_module = None
        
        self.init_ui()
        self.show_dashboard()
        
    def init_ui(self):
        """Inicializar interfaz principal"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QHBoxLayout()
        
        # Sidebar
        sidebar = self.create_sidebar()
        main_layout.addWidget(sidebar)
        
        # √Årea de contenido
        self.content_area = QStackedWidget()
        main_layout.addWidget(self.content_area)
        
        # Proporciones
        main_layout.setStretch(0, 0)  # Sidebar fijo
        main_layout.setStretch(1, 1)  # Contenido expandible
        
        central_widget.setLayout(main_layout)
        
        # Crear m√≥dulos
        self.create_modules()
        
    def create_sidebar(self):
        """Crear barra lateral de navegaci√≥n"""
        sidebar = QFrame()
        sidebar.setFixedWidth(250)
        sidebar.setStyleSheet("""
            QFrame {
                background-color: #1e293b;
                border-right: 2px solid #334155;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(5)
        layout.setContentsMargins(10, 20, 10, 20)
        
        # Logo/T√≠tulo
        logo = QLabel("üèóÔ∏è JURMAQ")
        logo.setFont(QFont("Arial", 20, QFont.Bold))
        logo.setStyleSheet("color: white; padding: 10px; text-align: center;")
        logo.setAlignment(Qt.AlignCenter)
        
        user_info = QLabel(f"üë§ {self.user_data['nombre']}")
        user_info.setFont(QFont("Arial", 11))
        user_info.setStyleSheet("color: #94a3b8; padding: 5px; text-align: center;")
        user_info.setAlignment(Qt.AlignCenter)
        
        layout.addWidget(logo)
        layout.addWidget(user_info)
        
        # Separador
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setStyleSheet("color: #475569;")
        layout.addWidget(separator)
        
        # Botones de navegaci√≥n
        modules = [
            ("üè†", "Dashboard", "Panel principal con m√©tricas"),
            ("üìä", "Presupuestos", "Gesti√≥n de presupuestos y cotizaciones"),
            ("üõí", "√ìrdenes de Compra", "Control de √≥rdenes de compra"),
            ("üí∞", "Remuneraciones", "Liquidaci√≥n de sueldos"),
            ("üöú", "Rental Maquinaria", "Arriendo de maquinaria pesada"),
            ("üöõ", "Veh√≠culos", "Gesti√≥n de flota vehicular"),
            ("üí≥", "Cuentas por Pagar", "Control financiero"),
            ("üì¶", "Stock/Inventario", "Control de materiales"),
            ("üìã", "Documentos", "Gesti√≥n documental"),
            ("üîî", "Notificaciones", "Sistema de alertas"),
            ("‚öôÔ∏è", "Configuraci√≥n", "Configuraci√≥n del sistema")
        ]
        
        self.nav_buttons = {}
        
        for icon, name, desc in modules:
            btn = QPushButton(f"{icon} {name}")
            btn.setFont(QFont("Arial", 11, QFont.Bold))
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    color: #cbd5e1;
                    border: none;
                    padding: 12px;
                    text-align: left;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #334155;
                    color: white;
                }
                QPushButton:pressed {
                    background-color: #3b82f6;
                }
            """)
            btn.clicked.connect(lambda checked, module=name: self.switch_module(module))
            btn.setToolTip(desc)
            
            layout.addWidget(btn)
            self.nav_buttons[name] = btn
        
        layout.addStretch()
        
        # Bot√≥n cerrar sesi√≥n
        logout_btn = QPushButton("üö™ Cerrar Sesi√≥n")
        logout_btn.setFont(QFont("Arial", 11, QFont.Bold))
        logout_btn.setStyleSheet("""
            QPushButton {
                background-color: #ef4444;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #dc2626;
            }
        """)
        logout_btn.clicked.connect(self.logout)
        layout.addWidget(logout_btn)
        
        sidebar.setLayout(layout)
        return sidebar
        
    def create_modules(self):
        """Crear todos los m√≥dulos"""
        
        # Dashboard
        dashboard_content = """
üè† DASHBOARD PRINCIPAL

üìä M√âTRICAS EN TIEMPO REAL:
‚Ä¢ Presupuestos activos: 25
‚Ä¢ √ìrdenes de compra pendientes: 12
‚Ä¢ Veh√≠culos en terreno: 8
‚Ä¢ Personal activo: 45
‚Ä¢ Proyectos en curso: 15

üí∞ RESUMEN FINANCIERO:
‚Ä¢ Ingresos del mes: $45,890,000
‚Ä¢ Gastos del mes: $32,150,000
‚Ä¢ Utilidad bruta: $13,740,000
‚Ä¢ Presupuesto disponible: $125,000,000

‚ö†Ô∏è ALERTAS IMPORTANTES:
‚Ä¢ 3 documentos pr√≥ximos a vencer
‚Ä¢ 2 veh√≠culos requieren mantenimiento
‚Ä¢ 5 √≥rdenes de compra pendientes de aprobaci√≥n

üéØ ESTADO GENERAL: Operativo
        """
        
        dashboard = ModuloSimple("üè† DASHBOARD", "Panel de control principal con m√©tricas en tiempo real", dashboard_content)
        self.content_area.addWidget(dashboard)
        
        # Otros m√≥dulos
        modules_data = [
            ("üìä PRESUPUESTOS", "Gesti√≥n completa de presupuestos y cotizaciones", ""),
            ("üõí √ìRDENES DE COMPRA", "Control de √≥rdenes de compra y combustible", ""),
            ("üí∞ REMUNERACIONES", "Sistema de liquidaci√≥n de sueldos y personal", ""),
            ("üöú RENTAL MAQUINARIA", "Gesti√≥n de arriendo de maquinaria pesada", ""),
            ("üöõ VEH√çCULOS", "Control integral de flota vehicular", ""),
            ("üí≥ CUENTAS POR PAGAR", "Sistema de control financiero y pagos", ""),
            ("üì¶ STOCK/INVENTARIO", "Control de materiales, herramientas y stock", ""),
            ("üìã DOCUMENTOS", "Sistema de gesti√≥n documental con versionado", ""),
            ("üîî NOTIFICACIONES", "Sistema inteligente de alertas y notificaciones", ""),
            ("‚öôÔ∏è CONFIGURACI√ìN", "Configuraci√≥n avanzada del sistema", "")
        ]
        
        for titulo, descripcion, contenido in modules_data:
            module = ModuloSimple(titulo, descripcion, contenido)
            self.content_area.addWidget(module)
    
    def switch_module(self, module_name):
        """Cambiar m√≥dulo activo"""
        module_index = {
            "Dashboard": 0,
            "Presupuestos": 1,
            "√ìrdenes de Compra": 2,
            "Remuneraciones": 3,
            "Rental Maquinaria": 4,
            "Veh√≠culos": 5,
            "Cuentas por Pagar": 6,
            "Stock/Inventario": 7,
            "Documentos": 8,
            "Notificaciones": 9,
            "Configuraci√≥n": 10
        }
        
        if module_name in module_index:
            self.content_area.setCurrentIndex(module_index[module_name])
            self.current_module = module_name
            
            # Actualizar estilo del bot√≥n activo
            for name, btn in self.nav_buttons.items():
                if name == module_name:
                    btn.setStyleSheet("""
                        QPushButton {
                            background-color: #3b82f6;
                            color: white;
                            border: none;
                            padding: 12px;
                            text-align: left;
                            border-radius: 6px;
                            font-weight: bold;
                        }
                    """)
                else:
                    btn.setStyleSheet("""
                        QPushButton {
                            background-color: transparent;
                            color: #cbd5e1;
                            border: none;
                            padding: 12px;
                            text-align: left;
                            border-radius: 6px;
                        }
                        QPushButton:hover {
                            background-color: #334155;
                            color: white;
                        }
                    """)
    
    def show_dashboard(self):
        """Mostrar dashboard por defecto"""
        self.switch_module("Dashboard")
    
    def logout(self):
        """Cerrar sesi√≥n"""
        reply = QMessageBox.question(
            self, "Cerrar Sesi√≥n",
            "¬øEst√° seguro que desea cerrar sesi√≥n?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.close()
            QApplication.quit()

class JURMAQApplication:
    """Aplicaci√≥n principal JURMAQ"""
    
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.app.setApplicationName("JURMAQ")
        self.app.setApplicationVersion("1.0.0")
        
    def run(self):
        """Ejecutar aplicaci√≥n"""
        # Mostrar login
        login = LoginDialog()
        
        if login.exec_() == QDialog.Accepted and login.user_data:
            # Usuario autenticado, mostrar ventana principal
            main_window = JURMAQMainWindow(login.user_data)
            main_window.show()
            
            return self.app.exec_()
        else:
            # Login cancelado
            return 0

def main():
    """Funci√≥n principal"""
    try:
        app = JURMAQApplication()
        return app.run()
    except Exception as e:
        print(f"Error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())